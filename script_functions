#!/bin/bash

###############################################
####              CONSTANTS                ####
###############################################

## Name of procesing directory
PROC_DIR="proc"

## Hmm just ordanary PI
PI=3.1415926535897932384626433832795028841971693993751058209749

## Constatn to transfer degrees into radians
DEGPI=0.01745329251994329576923690768488612713442871888541725456

## Gas constant used in calculations
R=1.0

## Value describe how is sigma for spherocylinders representing alpha helix related to Angstroms so SIM_TO_REAL_TRANSITION_LENGHTH*sigma=size in Angstroms
SIM_TO_REAL_TRANSITION_LENGHTH=7.12719167

## Average number of molecules of water in one cubic Angstrom
P_PER_CUBIC_ANGSTROM_WATER=0.0332575

###############################################
####           Math Functions              ####
###############################################
sin(){
	## Return value of sin(x), where x is in RADIANS
	echo "$(bc <<< "scale=10;s(${1})")"
	return $?		
}

cos(){
	## Return value of cos(x), where x is in RADIANS
	echo "$(bc <<< "scale=10;c(${1})")"
	return $?		
}

tan(){
	## Return value of tan(x), where x is in RADIANS
	echo "$(bc <<< "scale=10;s(${1})/c($1)")"
	return $?		
}

ctn(){
	## Return value of cotange(x), where x is in RADIANS
	echo "$(bc <<< "scale=10;c(${1})/s($1)")"
	return $?		
}

asin(){
	## Return value of arcsin(x), where x is in RADIANS
	if [[ $1 == 1 ]]; then
		echo "$(bc <<< "scale=10; ${PI}/2")"
		return $?
	elif [[ $1 == -1 ]]; then
		echo "$(bc <<< "scale=10; -${PI}/2")"
		return $?
	else
		echo "$(bc <<< "scale=10; a(${1}/sqrt(1-(${1}^2)))")"
		return $?
	fi
}

acos(){
	## Return value of arccos(x), where x is in RADIANS
	if [[ $1 == 1 ]]; then
		echo "$(bc <<< "scale=10; 0")"
		return $?
	elif [[ $1 == -1 ]]; then
		echo "$(bc <<< "scale=10; ${PI}")"
		return $?
	else
		echo "$(bc <<< "scale=10; ${PI}/2 - a(${1}/sqrt(1-(${1}^2))")"
		return $?
	fi	
}

###############################################
####         Geometry Functions            ####
###############################################
angleBetweenVectors(){
	## Input are three numbers in format "x1 y1 z1 x2 y2 z2" and return angle between vectors in radians
	echo $(acos "$(echo $1 | awk '{print (  ($1*$4+$2*$5+$3*$6)/( sqrt($1*$1 + $2*$2 + $3*$3) * sqrt($4*$4 + $5*$5 + $6*$6) )  )}')")
	return 0
}

centerOfMass(){
    ## Input is set of coordinates and mass of these objects if no mass is specified mass is take as unity (1)
    ## EXAMPLE: "1.0  1.0  1.0   5\n-1.0 -1.0 -1.0  5\n0.0  0.0  0.0   100"
    ## RESULT:  "0.0\t0.0\t0.0"
    echo -e "$1" | awk '
        BEGIN{
            x=0.0;
            y=0.0;
            z=0.0;
            mass=0.0;
        }
        {
            if(NF==3){
                M=1;
            }else{
                M=$4;
            }

            x+=$1*M;
            y+=$2*M;
            z+=$3*M;
            mass+=M;

        }END{
            print x/mass"\t"y/mass"\t"z/mass
        }'
    return $?
}

twoPointsDistance(){
    ## Calculate simply distance between two points in 3D
    ## EXAMPLE: 0.0 0.0 0.0  1.0 0.0 0.0
    ## RESULT: "1"
    echo $(bc <<< "scale=20; sqrt( ( $1 - $4 )^2 + ( $2 - $5 )^2 + ( $3 - $6 )^2 )" 2> /dev/null)
    return $?
}


###############################################
####            PRINT MACROS               ####
###############################################

## Every return for scripts can be trun on by enable silent disable silent 
## mode SILENT == 0 
printMessage(){
    if [[ $SILENT == 0 ]]; then
        printf "${1}"
    fi
}

## Simple print Debug messages only when DEBUG=1
printDebug(){
    if [[ $DEBUG == 1 ]]; then
        printf "${1}"
    fi
}

## Multiple Debug parts in code can be specified and DEBUG messages
## can be turn on by DEBUG="1 8 4" string which enable different parts
printDebugL(){
	if [[ $(isInStringArray "$1" "$DEBUG") == 1 ]]; then
        printf "${2}"
    fi
}

printWarning(){
	printf "\e[33;1mWARNING:\e[0m ${1}" 
}

printError(){
	printf "\e[1;31mERROR:\e[0m ${1}" 
}

printInfo(){
	printf "\e[1;34mINFO:\e[0m ${1}" 
}

###############################################
####            Other MACROS               ####
###############################################

isSimulationFinished(){
	status=$(pstatus)
	if [[ $status != "F" ]]; then
	    echo "0"
	fi
	if [[ $status == "K" ]]; then ## also run if simulation were killed, potentionaly dangerous!!!
		echo "0"
	fi
    return 1
}

isSimulationGrandCanonical(){
	if [[ $(sed -n 's/^paraltemp.*=[ ]*\([0-9\.]*\).*/\1/p' options) == 0 ]]; then
		echo "0"
	else
		echo "1"
	fi
	return 0
}

isInStringArray(){
	## input first is string and second is string arry
	## return 1 if string is in string array 0 if not
	for substring in $2 ; do
		if [[ $substring == $1 ]]; then
			echo 1
			exit 0
        fi
	done
	echo 0
	exit 0
}

isNumber() { 
	## input is string
	## return 1 if string is number or 0 if string isnt number
	echo $(awk -v a="$1" 'BEGIN {if( a != "" ){print (a == a + 0)}else{print 0}}';)
}

getFileName(){
	## input is path to file
	## return name of file without extension
	filename=$(basename "${1}")
	echo "${filename%.*}"
}

getFileExtension(){
	## input is path to file
	## return extension of file
	filename=$(basename "${1}")
	echo "${filename##*.}"
}


maxNumOfColumns(){
	## Function return maximum number of columns from formated string can be also file
	## usage k=$(maxNumOfColumns "$(cat ./test.txt)")   or k=$(maxNumOfColumns "$text")
	echo $(printf "$1" | awk 'BEGIN{max=0}{if( NF > max ){max=NF}}END{print max}')
}

getSubmitQueue(){
	## Function simply chceck on which site we are and base on that select queue for submitting and properties
	CURENT_SITE="$(site active 2>&1)"
	if [[ $CURENT_SITE == "robox" ]]; then
		QUEUE_NAME_D=long
	elif [[ $CURENT_SITE == "metacentrum" ]]; then
		QUEUE_NAME_D=default
	else
		QUEUE_NAME_D=UNKNOWN
	fi
	echo "$QUEUE_NAME_D"
}

###############################################
####      Init Processing Directory        ####
###############################################
initProcDir(){
	if [ ! -d ./${PROC_DIR} ]; then
    	mkdir ./${PROC_DIR}
	fi
}

###############################################
####         Sim Parameters                ####
###############################################

printAcceptance(){
    echo -e "\n------------------------GC-----------------------------------"
    echo -e "\e[1m \e[91m"
    cat top.init | awk '{if($1 == "ACTIVITY:"){printf "Activity: %e",$2}}'
    echo -e "\e[0m"
    LS_STDOUT=$(ls -f runscript*#*.stdout)
    name=$(echo $LS_STDOUT | head -n 1 )
    cat ${name:: -11}.stdout | awk '{if($1 == "Acceptance:"){getline;print;getline;print}}'
    for run in $LS_STDOUT; do 
        cat $run | awk '{if($1 == "Acceptance:"){getline;print;getline;print}}'
    done
    echo -e "\n-------------------------------------------------------------\n"
}

numOfReplica(){
	## Function return number of simulated replicas in current directory
    num=$(ls -f ./?config.last ./??config.last 2> /dev/null | wc -l)
    if [[ $num == 0 ]]; then
	    echo 1
    else
        echo "$num"
    fi
	return 0
}

volumeOfSpherocylinder(){
	## Function simply calculate volume of spherocylinder when diameter (sigma) and length is given
	SIGMA=$1
	LENGHT=$2
	echo $(bc <<< "scale=20;((${PI}*${SIGMA}*${SIGMA}*(2*${SIGMA}+3*${LENGHT}))/12)")
	return $?
}

getBoxSize(){
	## Function get box size into string of format "x-size y-size z-size"
	echo $(cat < $(ls *config*.init | head -n 1) | head -n 1 )
	return 0
}

volumeOfBox(){
	echo $(cat < $(ls *config*.init | head -n 1) | head -n 1 | awk '{print $1*$2*$3}')
	return 0
}

averageNumberOfParticles(){
	## Is simulation paralele tempering ?
	if [[ $(numOfReplica) == 1 ]]; then ## its just single run
		echo $(awk 'BEGIN{sum=0;counter=0}{if(NF == 1){sum+=$1;counter++}}END{print sum/counter}' ./$(ls -f movie movie-? movie-?? 2> /dev/null | head -n 1 ))
		return 0
	else
		echo $(awk 'BEGIN{sum=0;counter=0}{if(NF == 1){sum+=$1;counter++}}END{print sum/counter}' ./$(ls -f ?movie ?movie-? ?movie-?? 2> /dev/null | head -n 1 ))
		return 0
	fi
}

getTemp(){
	## Function return value of temperature form option file in curent directory
	echo -n $(sed -n 's/^temper.*=[ ]*\([0-9\.]*\).*/\1/p' ./options)
	return 0
}

getPTemp(){
	## Function return value of temperature form option file in curent directory
	echo -n $(sed -n 's/^paraltemp.*=[ ]*\([0-9\.]*\).*/\1/p' options)
	return 0
}

getTempStep(){
	## Function get size of temperature step in parallel tempering
	echo $(bc <<< "scale=10;( $(getPTemp) - $(getTemp) ) / ( $(numOfReplica) - 1 )")
	return 0
}

###############################################
####          Extract functions            ####
###############################################

selectParticlesFromMovie(){
    ## Script take as argument movie file and sweep number and id's of particles (must be increasingly ordered) and print them on stdout
    ## EXAMPLE  :./particle_from_movie 32500 "1 2 10" ./movie_file ----> RETURN first second and 10-th particles from sweep number 32500

    #SWEEP=2000
    SWEEP=$1
    #PARTICLES="1 2 5"
    PARTICLES="$2"

    awk -v sweep=$SWEEP -v particles="$PARTICLES" '
        BEGIN{
            num_of_particles=split(particles,part," ")
            particle_counter=1
            head_NR=-1
        }
        {
        if($2 == sweep";"){
            head_NR=NR
            getline
        }
        if( (head_NR != -1) && (NR-head_NR == part[particle_counter])){
            print
            particle_counter ++
        }
        if(particle_counter == num_of_particles+1){
            exit
        }
	}' < $3
}

extractClustersFromMovie(){
	## Function take as input movie file and cluster.dat file and extract clusters of different size into separet files whith geometry
	PATH_TO_CLUSTER_DAT=$1
	PATH_TO_MOVIE=$2
	OUTPUT_PATH=$3

	createClusterList(){
		## Function extract all clusters of specified size from cluster.dat into formated list
		## EXAMPLE:	createClusterList ./cluster.dat 3
		## RESULT:	1000 	-10.35	3		1		5  		18
		##			2000 	-11.25	3		4		12 		19
		##			....  	..... 
		##			sweep 	energy	cl_size pve_num pve_num ...
		awk -v cl_size=$[$2 +1 ] '{
			if($1 == "Sweep:"){
				sweep=$2
			}else{
				if(NF==cl_size){
					match($1,".*\((-[0-9.]*)\)",energy)
					if(cl_size == 2){energy[1]=0.0}
					$1="";print sweep,energy[1],cl_size-1,$0
				}
			}
		}' $1
	}

	createClusterMovie(){
	## Function take cluster list and particular movie file and extract all clusters in cluster list into separet file
	## EXAMPLE:	createClusterMovie ./0movie ./0cluster_dat.list
		BOX=$(getBoxSize)
		PSEUDO_SWEEP=1
		while read line; do
			echo "ENERGY: $(echo $line | awk '{print $2}')"
			echo "$(echo $line | awk '{print $3}')"
			echo "sweep ${PSEUDO_SWEEP}; box ${BOX}"
			selectParticlesFromMovie "$(echo $line | awk '{print $1}')" "$(echo $line | awk '{$1="";$2="";$3="";print $0}')" $1
			PSEUDO_SWEEP=$[PSEUDO_SWEEP + 1]
		done < $2
	}


	## Here i will create separet cluster lists for each size of cluster from 1 (monomer) up to 10 (dodecamer)
	for ((i=1; i<=10; i++)); do
		PATH_TO_LIST="${OUTPUT_PATH}/$(basename ${PATH_TO_CLUSTER_DAT:: -4})_clSize_$(printf "%03i" ${i}).list"
		createClusterList $PATH_TO_CLUSTER_DAT $i > $PATH_TO_LIST

		PATH_TO_CLUSTER_MOVIE="${OUTPUT_PATH}/$(basename ${PATH_TO_MOVIE})_clSize_$(printf "%03i" ${i})"
		createClusterMovie $PATH_TO_MOVIE $PATH_TO_LIST > $PATH_TO_CLUSTER_MOVIE
	done

}	


printLine(){
	## Print particular line from file 
	## EXAMPLE printLine "15" ./file ----> RETURN first text in 15-line in file
	echo $(awk -v line=${1} '{if(NR == line){print;exit}}' $2)
	return 0
}

###############################################
####             Histograms                ####
###############################################

minMax(){
	## Function take given distribution where values might or not be ordered and find minimal and maximal value
	## EXAMPLE minMax "./path/to/distribution"
	## --------------------------------------------------------------------------------------------------------
	## RETURN        Two values of minimal and maximal value separated by space
	awk '
    	BEGIN{getline;min=$1;max=$1}
    	{
    	if($1 > max){
       		max = $1
        }
	    if($1 < min){
    	    min = $1
        }
    	}
    	END{
    	print min" "max
    	}
    	' < $1
}

histogram(){
	## Function take 3 arguments and given distribution where values might or not be ordered in one column
	## min          Minimum value of distribution
	## max          Maximum value of distribution
	## NUM_BINS     Number of bins in which distribution is divided
	## EXAMPLE      histogram $min $max $NUM_BINS "./path/to/distribution"
	## --------------------------------------------------------------------------------------------------------
	## RETURN       Data in two columns in first is middle value of bin and in second is population of that bin
	##              Return is on stdout 
	awk -v min=$1 -v max=$2 -v num_bins=$3 '
		BEGIN{
		    interval_size=(max-min)/num_bins
		    for(i=0; i<= num_bins; i++){
		        counter[i]=0
		        }
		    }
		{for(i=0; i<= num_bins; i++){
		    if( $1 <= (min+i*interval_size)){
		        counter[i]++;
		        break;
		        }
		    }
		}
		END{
		    for(i=1; i<=num_bins; i++){
		        printf "%.7f\t%d\n", min-(interval_size/2)+(interval_size*i), counter[i]
		    }
		}' < $4
}
